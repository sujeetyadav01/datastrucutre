{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 HelveticaNeue-Italic;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red232\green86\blue7;\red67\green91\blue103;
\red29\green38\blue42;\red245\green247\blue249;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c93725\c42353\c0;\cssrgb\c32941\c43137\c47843;
\cssrgb\c14902\c19608\c21961;\cssrgb\c96863\c97647\c98039;\cssrgb\c0\c0\c0\c84706;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
3Sum Closest\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs26 \cf3 Medium\
\pard\pardeftab720\partightenfactor0

\fs24 \cf4 \
2511\
\
156\
\
Add to List\
\
Share\
\pard\pardeftab720\partightenfactor0

\fs28 \cf5 Given an array 
\f2\fs26 \cf4 \cb6 nums
\f1\fs28 \cf5 \cb1  of 
\f3\i n
\f1\i0  integers and an integer 
\f2\fs26 \cf4 \cb6 target
\f1\fs28 \cf5 \cb1 , find three integers in 
\f2\fs26 \cf4 \cb6 nums
\f1\fs28 \cf5 \cb1  such that the sum is closest to 
\f2\fs26 \cf4 \cb6 target
\f1\fs28 \cf5 \cb1 . Return the sum of the three integers. You may assume that each input would have exactly one solution.\
 \
Example 1:\
\pard\pardeftab720\partightenfactor0

\f4\fs26 \cf5 \cb6 Input: nums = [-1,2,1,-4], target = 1\
Output: 2\
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf5 \cb1  \
Constraints:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
3 <= nums.length <= 10^3
\f1\fs28 \cf5 \cb1 \
\ls1\ilvl0
\f2\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
-10^3 <= nums[i] <= 10^3
\f1\fs28 \cf5 \cb1 \
\ls1\ilvl0
\f2\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
-10^4 <= target <= 10^4
\f1\fs28 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf7 import static java.lang.Math.abs; \
class Solution \{\
    public int threeSumClosest(int[] nums, int target) \{\
        Arrays.sort(nums);\
  \
    // To store the closets sum \
    int closestSum =  nums[0] + nums[1] + nums[2] ; \
  \
    // Fix the smallest number among \
    // the three integers \
    for (int i = 0; i < nums.length - 2; i++)  \
    \{ \
  \
        // Two pointers initially pointing at \
        // the last and the element \
        // next to the fixed element \
        int ptr1 = i + 1, ptr2 = nums.length - 1; \
  \
        // While there could be more pairs to check \
        while (ptr1 < ptr2) \
        \{ \
  \
            // Calculate the sum of the current triplet \
            int sum = nums[i] + nums[ptr1] + nums[ptr2]; \
  \
            // If the sum is more closer than \
            // the current closest sum \
            if(Math.abs(target-sum)<Math.abs(target-closestSum)) \
            \{ \
                closestSum = sum; \
            \} \
  \
            // If sum is greater then x then decrement \
            // the second pointer to get a smaller sum \
            if (sum > target)  \
            \{ \
                ptr2--; \
            \} \
  \
            // Else increment the first pointer \
            // to get a larger sum \
            else\
            \{ \
                ptr1++; \
            \} \
        \} \
    \} \
  \
    // Return the closest sum found \
    return closestSum; \
        \
 \
    \}\
\}}